(*
  Needham-Schroeder-Lowe asymmetric protocol
    A -> B: {A,nA,r1}_pkB
    B -> A: {B,nA,nB,r2}_pkA
    A -> B: {nB,r3}_pkB
*)


free a,b,c.

free s1,s2.

free ch.

free kc.

fun pk/1.
fun aenc/3.
reduc adec(aenc(x,r,pk(k)),k) -> x.

// Alice
let A(ca,a,b,ka,pkb) =
  new na;
  new r1;
  new r3;
  out(ca,aenc((a,na),r1,pkb));
  in(ca,xenc);
  let (=b,=na,x3) = adec(xenc,ka) in
  out(ca, aenc(x3,r3,pkb)).

// Bob (+property)
let B1(cb,b,a,kb,pka) =
  new r2;
  in(cb,z);
  let (=a,z2) = adec(z,kb) in
  out(cb,aenc((b,z2,s1),r2,pka));
  in(cb,x).

let B2(cb,b,a,kb,pka) =
  new r2;
  in(cb,z);
  let (=a,z2) = adec(z,kb) in
  out(cb,aenc((b,z2,s2),r2,pka));
  in(cb,x).


// Bob
let B(cb,b,a,kb,pka) =
  new nb;
  new r2;
  in(cb,z);
  let (=a,z2) = adec(z,kb) in
  out(cb,aenc((b,z2,nb),r2,pka));
  in(cb,x).

let P =
  new ka; new kb;
  out(ch,pk(ka));
  out(ch,pk(kb));
  (
    A(ch,a,b,ka,pk(kb)) | B1(ch,b,a,kb,pk(ka)) |
    A(ch,a,c,ka,pk(kc)) |
    B(ch,b,c,kb,pk(kc))
  ).


let Q =
  new ka; new kb;
  out(ch,pk(ka));
  out(ch,pk(kb));
  (
    A(ch,a,b,ka,pk(kb)) | B2(ch,b,a,kb,pk(ka)) |
    A(ch,a,c,ka,pk(kc)) |
    B(ch,b,c,kb,pk(kc))
  ).


query trace_equiv(P,Q).
