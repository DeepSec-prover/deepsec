(* Private Authentication Protocol

 1. A -> B: {Na, pub(A)}pub(B)
 2. B -> A: {Na, Nb,pub(B)}pub(A) if B wants to communicate with A
                  {Nb}pub(B) otherwise
*)

free ca1,ca2,ca3,ca4,ca5,ca6,ca7,ca8,ca9.
free cb1,cb2,cb3,cb4,cb5,cb6,cb7,cb8,cb9.
free c.

free ska, skb, skc [private].
free ski.

fun aenc/2.
fun pk/1.

reduc adec(aenc(x,pk(y)),y) -> x.

/*
    Description of role A played:
 - on channel ca
 - by the agent with private key ska
 - with the agent with public key pkb
*/

let processA(ca,ska,pkb) =
  new na;
  out(ca,aenc((na,pk(ska)),pkb));
  in(ca,x).


/*
    Description of role B played:
 - on channel cb
 - by the agent with private key skb
 - with the agent with public key pka
*/

let processB(cb,skb,pka) =
  in(cb,yb);
  new nb;
  let (yna,=pka) = adec(yb,skb) in
    out(cb,aenc((yna,nb,pk(skb)),pka))
  else out(cb,aenc(nb,pk(skb))).

/*
 Main
*/

let ProcessAB =
  out(c,pk(ska));
  out(c,pk(skb));
  out(c,pk(skc));
  (
    processA(ca1,ska,pk(skb)) | processB(cb1,skb,pk(ska)) | // B expects to talk to A
    processA(ca2,ska,pk(skb)) | processB(cb2,skb,pk(ska)) | // B expects to talk to A
    processA(ca3,skc,pk(ska)) | processB(cb3,ska,pk(skc)) | // A expects to talk to C (C is not an intruder)
    processA(ca4,ska,pk(ski)) |                             // I (intruder) expects to talk to A
    processB(cb5,skb,pk(ski)) |                             // B expects to talk to I
    processA(ca6,skb,pk(ska)) | processB(cb6,ska,pk(ska)) | // A expects to talk to B
    processA(ca7,skc,pk(skb)) | processB(cb7,skb,pk(skc)) | // B expects to talk to C
    processA(ca8,ska,pk(skb)) | processB(cb8,skb,pk(ska)) | // B expects to talk to A
    processA(ca9,ska,pk(skc))                               // I expects to talk to C
  ).

let ProcessCB =
  out(c,pk(ska));
  out(c,pk(skb));
  out(c,pk(skc));
  (
    processA(ca1,skc,pk(skb)) | processB(cb1,skb,pk(skc)) | // B expects to talk to C
    processA(ca2,ska,pk(skb)) | processB(cb2,skb,pk(ska)) | // B expects to talk to A
    processA(ca3,skc,pk(ska)) | processB(cb3,ska,pk(skc)) | // A expects to talk to C (C is not an intruder)
    processA(ca4,ska,pk(ski)) |                             // I (intruder) expects to talk to A
    processB(cb5,skb,pk(ski)) |                             // B expects to talk to I
    processA(ca6,skb,pk(ska)) | processB(cb6,ska,pk(ska)) | // A expects to talk to B
    processA(ca7,skc,pk(skb)) | processB(cb7,skb,pk(skc)) | // B expects to talk to C
    processA(ca8,ska,pk(skb)) | processB(cb8,skb,pk(ska)) | // B expects to talk to A
    processA(ca9,ska,pk(skc))                               // I expects to talk to C
  ).


query trace_equiv(ProcessAB,ProcessCB).
