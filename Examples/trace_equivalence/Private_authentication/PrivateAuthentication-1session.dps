(* Private Authentication Protocol

 1. A -> B: {Na, pub(A)}pub(B)
 2. B -> A: {Na, Nb,pub(B)}pub(A) if B wants to communicate with A
                  {Nb}pub(B) otherwise
*)

free ca.
free cb.
free c.

free ska, skb, skc [private].

fun aenc/2.
fun pk/1.

reduc adec(aenc(x,pk(y)),y) -> x.

/*
    Description of role A played:
 - on channel ca
 - by the agent with private key ska
 - with the agent with public key pkb
*/

let processA(ca,ska,pkb) =
  new na;
  out(ca,aenc((na,pk(ska)),pkb));
  in(ca,x).


/*
    Description of role B played:
 - on channel cb
 - by the agent with private key skb
 - with the agent with public key pka
*/

let processB(cb,skb,pka) =
  in(cb,yb);
  new nb;
  let (yna,=pka) = adec(yb,skb) in
    out(cb,aenc((yna,nb,pk(skb)),pka))
  else out(cb,aenc(nb,pk(skb))).

/*
 Main
*/

let ProcessAB =
  out(c,pk(ska));
  out(c,pk(skb));
  out(c,pk(skc));
  (
    processA(ca,ska,pk(skb)) | processB(cb,skb,pk(ska))
  ).

let ProcessCB =
  out(c,pk(ska));
  out(c,pk(skb));
  out(c,pk(skc));
  (
    processA(ca,skc,pk(skb)) | processB(cb,skb,pk(skc))
  ).


query trace_equiv(ProcessAB,ProcessCB).
