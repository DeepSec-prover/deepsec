/*
Private Authentication Protocol
 1. A -> B: {Na, pub(A)}pub(B)
 2. B -> A: {Na, Nb,pub(B)}pub(A) if B wants to communicate with A
                  {Nb}pub(B) otherwise
*/

set semantics = classic.

fun aenc/2.
fun pk/1.

reduc adec(aenc(x,pk(y)),y) -> x.

free c.


/*
Description of role A played:
- by the agent with private key ska
- with the agent with public key pkb
*/

let processA(ska,pkb) =
  new na;
  out(c,aenc((na,pk(ska)),pkb));
  in(c,z).


/*
Description of role B played:
- by the agent with private key skb
- with the agent with public key pka
*/

let processB(skb,pka) =
  in(c,y);
  new ne;
  let (y_na,y_pka) = adec(y,skb) in
    if y_pka = pka
    then
      new nb;
      out(c,aenc((y_na,nb,pk(skb)),pka))
    else out(c,aenc(ne,pk(skb)))
  else out(c,aenc(ne,pk(skb))).



// Main

let ProcessAB =
  new ska ; new skb ; new skc ; out(c,pk(ska)) ; out(c,pk(skb)) ; out(c,pk(skc));
  !^2 (processA(ska,pk(skb)) | processB(skb,pk(ska))).

let ProcessCB =
  new ska ; new skb ; new skc ; out(c,pk(ska)) ; out(c,pk(skb)) ; out(c,pk(skc));
  !^2 ( processA(skc,pk(skb)) | processB(skb,pk(skc))).

query trace_equiv(ProcessAB,ProcessCB).
