/* Private Authentication Protocol

 1. A -> B: {Na, pub(A)}pub(B)
 2. B -> A: {Na, Nb,pub(B)}pub(A) if B wants to communicate with A
                  {Nb}pub(B) otherwise
*/

free ca1.
free cb1.
free ca2.
free cb2.
free ca3.
free cb3.
free ca4.
free cb4.
free c.

fun aenc/2.
fun pk/1.

reduc adec(aenc(x,pk(y)),y) -> x.

/*
    Description of role A played:
 - on channel ca
 - by the agent with private key ska
 - with the agent with public key pkb
*/

let processA(ca,ska,pkb) =
  new na;
  out(ca,aenc((na,pk(ska)),pkb));
  in(ca,x).


/*
    Description of role B played:
 - on channel cb
 - by the agent with private key skb
 - with the agent with public key pka
*/

let processB cb skb pka =
  in(cb,yb);
  let (yna,ypka) = adec(yb,skb) in
  new nb;
  if ypka = pka  then out(cb,aenc((yna,nb,pk(skb)),pka))
  else out(cb,aenc(nb,pk(skb))).

/*
 Main
*/

let ProcessAB = in(c,zz);
  new ska ; new skb ; new skc ; out(c,pk(ska)) ; out(c,pk(skb)) ; out(c,pk(skc));
  ( processA(ca1,ska,pk(skb))  | processB(cb1,skb,pk(ska)) |
    processA(ca2,ska,pk(skb))  | processB(cb2,skb,pk(ska)) |
    processA(ca3,ska,pk(skb))  | processB(cb3,skb,pk(ska)) |
    processA(ca4,ska,pk(skb))  | processB(cb4,skb,pk(ska))
  ).

let ProcessCB = in(c,zz);
 new ska ; new skb ; new skc ; out(c,pk(ska)) ; out(c,pk(skb)) ; out(c,pk(skc));
  ( processA(ca1,skc,pk(skb))  | processB(cb1,skb,pk(skc)) |
    processA(ca2,skc,pk(skb))  | processB(cb2,skb,pk(skc)) |
    processA(ca3,skc,pk(skb))  | processB(cb3,skb,pk(skc)) |
    processA(ca4,skc,pk(skb))  | processB(cb4,skb,pk(skc))
  ).


query trace_equiv(ProcessAB,ProcessCB).
