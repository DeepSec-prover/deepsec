/* Denning Sacco Symmetric Key
#
# 1.  A	->	S:  	A, B
# 2.  S	->	A:  	{B, Kab, {Kab, A}Kbs}Kas
# 3.  A	->	B:  	{Kab,A}Kbs
# Strong secrecy of Kab
# 6.  B      ->     : {m}Kab versus {m}K with K fresh
*/

free a.
free b.

free c.
free ca1.
free cb1.
free cs1.
free ca2.
free cb2.
free cs2.

free ok.
free req.
free rep.

fun senc/2.
reduc sdec(senc(x,y),y) -> x.

/*
#    Description of role A played:
# - on channel ca
# - by a with key kas (shared with the server S)
# - with responder b
*/

let processA(ca,a,kas,b) =
  out(ca,(a,b));
  in(ca,xa);
  let (xb,xab,xmb) = sdec(xa,kas) in
  if xb = b then
  out(ca,xmb).

/*
#    Description of role B played:
# - on channel cb
# - by b with key kbs (shared with the server S)
# - with initiator a
*/

let processBreal(cb,b,kbs,a) =
  in(cb,yb);
  let (yab,ya)= sdec(yb,kbs) in
  if ya = a then
	out(cb,senc(ok,yab)).


let processBideal(cb,b,kbs,a)  =
  in(cb,yb);
  let (yab,ya)= sdec(yb,kbs) in
  if ya = a then
	new k;
	out(cb,senc(ok,k)).

/*
#    Description of role S played:
# - on channel cs
# - to answer a request coming from a (with key kas)
# - who wants to communicate with b (with key kbs)
*/

let processS(cs,a,kas,b,kbs) =
	in(cs,zs);
	let (za,zb) = zs in
  if za = a then
  if zb = b then
	new kab;
	out(cs,senc((zb,kab,senc((kab,za),kbs)),kas)).

// Main

let Preal =
  in(c,zz); if zz= ok then
  new kas; new kbs;
( processA(ca1,a,kas,b) |  processBreal(cb1,b,kbs,a) | processS(cs1,a,kas,b,kbs) |
  processA(ca2,a,kas,b) |  processB(cb2,b,kbs,a) | processS(cs2,a,kas,b,kbs)
  ).


let Pideal =
  in(c,zz); if zz= ok then
  new kas; new kbs;
( processA(ca1,a,kas,b) |  processBideal(cb1,b,kbs,a) | processS(cs1,a,kas,b,kbs) |
  processA(ca2,a,kas,b) |  processB(cb2,b,kbs,a) | processS(cs2,a,kas,b,kbs)
).

query trace_equiv(Preal,Pideal).
