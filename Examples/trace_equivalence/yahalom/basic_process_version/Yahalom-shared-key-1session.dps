/* Yahalom
 Summary: Distribution of a fresh symmetric shared key by a trusted server
 and mutual authentication.

 1.  A	->      B:	A, Na
 2.  B	->	S:  	B, {A, Na, Nb}Kbs
 3.  S	->	A:  	{B, Kab, Na, Nb}Kas, {A, Kab}Kbs
 4.  A	->	B:      {A, Kab}Kbs, {Nb}Kab
 Strong secrecy of Kab
 3.  B      ->     : {m}Kab versus {m}K with K fresh
*/

free a.
free b.

free c.
free ca.
free cb.
free cs.

free ok.

fun senc/2.
reduc sdec(senc(x,y),y) -> x.

/*
    Description of role A played:
 - on channel ca
 - by a with key kas (shared with the server S)
 - with responder b
*/

let processA(ca,a,b,kas) =
  new na;
  out(ca, (a, na));
  in(ca, xa);
  let (xas, xbs) = xa in
  let (xb, xkab, xna, xnb) = sdec(xas, kas) in
  if xna = na then
  if xb = b then
  out(ca, (xbs, senc(xnb, xkab))).

/*
    Description of role B played:
 - on channel cb
 - by b with key kbs (shared with the server S)
 - with initiator a
*/

let processBreal(cb,a,b,kbs) =
  new nb;
  in(cb, yb);
  let (ya, yna) = yb in
  if ya = a then
  out(cb, (b, senc((a, yna, nb), kbs)));
  in(cb, zb);
  let (zbs, zab) = zb in
  let (za, zkab) = sdec(zbs, kbs) in
  let znb = sdec(zab, zkab) in
  if znb = nb then
  out(cb, senc(ok, zkab)).

let processBideal(cb,a,b,kbs) =
  new nb;
  new n;
  in(cb, yb);
  let (ya, yna) = yb in
  if ya = a then
  out(cb, (b, senc((a, yna, nb), kbs)));
  in(cb, zb);
  let (zbs, zab) = zb in
  let (za, zkab) = sdec(zbs, kbs) in
  let znb = sdec(zab, zkab) in
  if znb = nb then
  out(cb, senc(n, zkab)).


/*
    Description of role S played:
 - on channel cs
 - to answer a request coming from a (with key kas)
 - who wants to communicate with b (with key kbs)
*/

let processS(cs,a,b,kas,kbs) =
  new kab;
  in(cs, zs);
  let (zb, zbs) = zs in
  let (za, zna, znb) = sdec(zbs, kbs) in
  if zb = b then
  if za = a then
  out(cs, (senc((b, kab, zna, znb), kas), senc((a, kab), kbs))).

/*
  			Main
*/

let Preal =
  new kas; new kbs;
( processA(ca,a,b,kas) |  processBreal(cb,a,b,kbs) | processS(cs,a,b,kas,kbs) ).


let Pideal =
  new kas; new kbs;
( processA(ca,a,b,kas) |  processBideal(cb,a,b,kbs) | processS(cs,a,b,kas,kbs) ).

query trace_equiv(Preal, Pideal).
