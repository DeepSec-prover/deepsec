free c.

fun h/1.
fun mac/2.
fun read/0.

fun dg_1/0.
fun dg_2/0.
fun dg_3/0.
fun dg_4/0.

fun ok/0.
fun senc/2.
fun sign/2.
fun vk/1.

reduc sdec(senc(x,y),y) -> x.
reduc checksign(sign(x,y),vk(y)) -> x.

// Description of the different roles.

let PApassport(ksenc,ksmac,dg,sod) =
  in(c, x);
  let (xenc, xmac) = x in
  if xmac = mac(xenc, ksmac)
  then
    let xread = sdec(xenc,ksenc) in

    if xread = read
    then
      let menc = senc((dg, sod),ksenc) in
      let mmac = mac(menc,ksmac) in
      out(c, (menc,mmac))
    else 0
  else 0.

let PAreader(KPrDS,ksenc,ksmac)=
  let menc = senc(read,ksenc) in
  let mmac = mac(menc,ksmac) in
  out(c, (menc, mmac));
  in(c,x);
  let (xenc, xmac) = x in
  if xmac = mac(xenc, ksmac) then
  let (xdg,xsod) = sdec(xenc,ksenc) in
  let (xhdg, xshdg) = xsod in
  if xhdg = checksign(xshdg, vk(KPrDS)) then
  if xhdg = h(xdg)
  then out(c, ok).

let ePassport(KPrDS,dg) =
  let sod = (h(dg), sign(h(dg),KPrDS)) in
  new ksenc;
  new ksmac;
  (PAreader(KPrDS,ksenc,ksmac) | PApassport(ksenc,ksmac,dg,sod)).

// Main systems.

let system1 =
  new KPrDS;
  let KPuDS = vk(KPrDS) in
  out(c,KPuDS);
  (ePassport(KPrDS,dg_1) | ePassport(KPrDS,dg_1) | ePassport(KPrDS,dg_3) | ePassport(KPrDS,dg_4)).

let system2 =
  new KPrDS;
  let KPuDS = vk(KPrDS) in
  out(c,KPuDS);
  (ePassport(KPrDS,dg_1) | ePassport(KPrDS,dg_2) | ePassport(KPrDS,dg_3) | ePassport(KPrDS,dg_4)).


query trace_equiv(system1,system2).
