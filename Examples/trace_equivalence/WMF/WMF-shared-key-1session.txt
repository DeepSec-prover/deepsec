/* Wide Mouthed Frog Symmetric Key

 1.  A	->	S:  	{B, Kab}Kas
 2.  S	->	B:  	{A, Kab}Kbs
 Strong secrecy of Kab
 3.  B      ->     : {m}Kab versus {m}K with K fresh
*/

free a.
free b.

free c.

free ok.

fun senc/2.
reduc sdec(senc(x,y),y) -> x.

/*
    Description of role A played:
 - on channel ca
 - by a with key kas (shared with the server S)
 - with responder b
*/

let processA(a,kas,b) =
  new kab;
  out(c,senc((b,kab),kas)).

/*
    Description of role B played:
 - on channel cb
 - by b with key kbs (shared with the server S)
 - with initiator a
*/

let processBreal(b,kbs,a)  =
  in(c,yb);
  let (ya,yab)= sdec(yb,kbs) in
  if ya = a then
  out(c,senc(ok,yab)).


let processBideal(b,kbs,a)  =
  in(c,yb);
  let (ya,yab)= sdec(yb,kbs) in
  if ya = a then
 	new k;
	out(c,senc(ok,k)).

/*
    Description of role S played:
 - on channel cs
 - to answer a request coming from a (with key kas)
 - who wants to communicate with b (with key kbs)
*/

let processS(a,kas,b,kbs) =
	in(c,zs);
	let (zb,zab) = sdec(zs,kas) in
	if zb =b then
	out(c,senc((a,zab),kbs)).

/*
   			Main
*/

let Preal =
  new kas; new kbs;
( processA(a,kas,b) |  processBreal(b,kbs,a) | processS(a,kas,b,kbs)).


let Pideal =
  new kas; new kbs;
( processA(a,kas,b) |  processBideal(b,kbs,a) | processS(a,kas,b,kbs)).

query trace_equiv(Preal,Pideal).
