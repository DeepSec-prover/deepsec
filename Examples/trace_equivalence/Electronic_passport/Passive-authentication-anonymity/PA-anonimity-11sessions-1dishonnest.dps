// Passive Authentication Protocol between a passport (P) and a reader (R)
// We test the anonymity of the passport
// SHOULD BE TRUE

// Pieces of data stored in the different passports
free dgA, dgB, dgC, dgI.

// channels
free c.
free chP1,chR1,chP2,chR2,chP3,chR3,chP4,chR4,chP5,chR5,chP6,chR6,chP7,chR7,chP8,chR8,chP9,chR9,chP10,chR10,chP11,chR11.

free ksencI, ksmacI.

// constants
free ok.
free read.

// functions
fun h/1.
fun mac/2.
fun senc/2.
fun sign/2.
fun vk/1.

reduc sdec(senc(x,y),y) -> x.
reduc checksign(sign(x,y),vk(y)) -> x.

/*
Description of the passport role:
- it plays on channel c
- it uses encryption/mac keys ksenc/ksmac
- it stores data dg and the signed version sod
*/

let passport(ksenc,ksmac,dg,sod,ch) =
  in(ch, x);
  let (xenc, xmac) = x in
  if xmac = mac(xenc, ksmac) then
  if read = sdec(xenc,ksenc) then
  let menc = senc((dg, sod),ksenc) in
  let mmac = mac(menc,ksmac) in
  out(ch, (menc,mmac)).

/*
Description of the Reader role:
- it plays on channel c
- it uses encryption/mac keys ksenc/ksmac
- it has the signature key KPrDS
*/

let reader(KPrDS,ksenc,ksmac,ch) =
  let menc = senc(read,ksenc) in
  let mmac = mac(menc,ksmac) in
  out(ch, (menc, mmac));
  in(ch,x);
  let (xenc, xmac) = x in
  if xmac = mac(xenc, ksmac) then
  let (xdg,(xhdg, xshdg)) = sdec(xenc,ksenc) in
  if xhdg = checksign(xshdg, vk(KPrDS)) then
  if xhdg = h(xdg) then
  out(ch, ok).

/*
Passport and Reader in parallel
*/

let OneSessionPassport(KPrDS,dg,chP,chR) =
  new ksenc;
  new ksmac;
  let sod = (h(dg), sign(h(dg),KPrDS)) in
  (reader(KPrDS,ksenc,ksmac,chR) | passport(ksenc,ksmac,dg,sod,chP)).

let Process1 =
  new KPrDS;
  out(c, vk(KPrDS));
  out(c, sign(h(dgI),KPrDS));
  (
    OneSessionPassport(KPrDS,dgA,chP1,chR1) |       // Passport of A
    OneSessionPassport(KPrDS,dgC,chP2,chR2) |       // Passport of C
    OneSessionPassport(KPrDS,dgC,chP3,chR3) |       // Passport of C
    reader(KPrDS,ksencI,ksmacI,chR4) |              // Passport of I
    OneSessionPassport(KPrDS,dgB,chP5,chR5) |       // Passport of B
    OneSessionPassport(KPrDS,dgA,chP6,chR6) |       // Passport of A
    OneSessionPassport(KPrDS,dgB,chP7,chR7) |       // Passport of B
    OneSessionPassport(KPrDS,dgC,chP8,chR8) |       // Passport of C
    OneSessionPassport(KPrDS,dgA,chP9,chR9) |       // Passport of A
    OneSessionPassport(KPrDS,dgB,chP10,chR10) |       // Passport of B
    OneSessionPassport(KPrDS,dgC,chP11,chR11)         // Passport of C
  ).

let Process2 =
  new KPrDS;
  out(c, vk(KPrDS));
  out(c, sign(h(dgI),KPrDS));
  (
    OneSessionPassport(KPrDS,dgB,chP1,chR1) |       // Passport of B
    OneSessionPassport(KPrDS,dgC,chP2,chR2) |       // Passport of A
    OneSessionPassport(KPrDS,dgC,chP3,chR3) |       // Passport of C
    reader(KPrDS,ksencI,ksmacI,chR4) |              // Passport of I
    OneSessionPassport(KPrDS,dgB,chP5,chR5) |       // Passport of B
    OneSessionPassport(KPrDS,dgA,chP6,chR6) |       // Passport of A
    OneSessionPassport(KPrDS,dgB,chP7,chR7) |       // Passport of B
    OneSessionPassport(KPrDS,dgC,chP8,chR8) |       // Passport of C
    OneSessionPassport(KPrDS,dgA,chP9,chR9) |       // Passport of A
    OneSessionPassport(KPrDS,dgB,chP10,chR10) |       // Passport of B
    OneSessionPassport(KPrDS,dgC,chP11,chR11)         // Passport of C
  ).

query trace_equiv(Process1,Process2).
