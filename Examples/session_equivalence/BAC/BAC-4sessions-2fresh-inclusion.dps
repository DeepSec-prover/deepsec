// Unlinkability

fun mac/2.

free c,d.

free Error_6300.
free get_challenge.

fun senc/2.

reduc sdec(senc(x,y),y) -> x.

// Description of the reader role

let reader(c,k_e,k_m) =
  out(c,get_challenge);
  in(c,xn_t);
  new n_r;
  new k_r;
  let xm = senc((n_r,xn_t,k_r),k_e) in
  out(c,(xm,mac(xm,k_m)));
  in(c,y).

// Description of the passport role

let passport(c,k_e,k_m) =
  in(c,x);
  if x = get_challenge
  then
    new n_t;
    out(c,n_t);
    in(c,y);
    let (xm_e,xm_m) = y in
    let (=xm_m,(xn_r,=n_t,xk_r)) = (mac(xm_e,k_m),sdec(xm_e,k_e)) in
      new k_t;
      let z = senc((n_t,xn_r,k_t),k_e) in
        out(c,(z,mac(z,k_m)))
      else 0
    else out(c,Error_6300).

let system(k_e,k_m) =
  passport(c,k_e,k_m) | reader(c,k_e,k_m).

let system_fresh =
  new k_e; new k_m; system(k_e,k_m).

// Unlinkability

let system_1111 = // system to compare with
  !^4 system_fresh.

let system_22 = // attack
  !^2 new k_e; new k_m; !^2 system(k_e,k_m).

let system_211 = // equivalence
  new k_e; new k_m; !^2 system(k_e,k_m) | !^2 system_fresh.

let system_31 = // attack
  new k_e; new k_m; !^3 system(k_e,k_m) | system_fresh.

let system_4 = // attack
  new k_e; new k_m; !^4 system(k_e,k_m).


query session_incl(system_211,system_1111).
