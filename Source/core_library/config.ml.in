exception Internal_error of string

let running_api = ref false

let debug_activated = false

let log_file =
  Random.init (int_of_float (Unix.time ()));
  if debug_activated
  then open_out (Printf.sprintf "debug_log_%d.txt" (Random.int 100000))
  else stdout

let internal_error msg =
  if debug_activated
  then
    begin
      Printf.fprintf log_file "Internal error : %s\nPlease report the bug to vincent.cheval@loria.fr with the input file and output\n" msg;
      flush log_file
    end;
  if !running_api
  then raise (Internal_error msg)
  else
    begin
      Printf.printf "Internal error : %s\nPlease report the bug to vincent.cheval@loria.fr with the input file and output\n" msg;
      exit 0
    end

let debug =
  if debug_activated
  then fun f -> f ()
  else fun _ -> ()

let display_in_log = true

let print_in_log ?(always=false) s =
  if display_in_log || always
  then
    begin
      Printf.fprintf log_file "%s" s;
      flush log_file
    end

(**** Testing *****)

let test_activated = false

let test =
  if test_activated
  then fun f -> f ()
  else fun _ -> ()

(**** Version ****)

let version = ref "VERSION"
let git_commit = ref "GITCOMMIT"
let git_branch = ref "GITBRANCH"

(**** Paths ****)

let path_deepsec = ref ""
let path_html_template = ref ""
let path_index = ref (Filename.current_dir_name)
let tmp_file = ref ""
let path_database = ref ""

(**** Trace display ****)

let display_trace = ref true

(**** Distribution ****)

let physical_core = PHYSICALCORE

let distributed = ref false
let local_workers = ref 0
let distant_workers = ref ([]:(string*string*int) list)
let number_of_jobs = ref 0
let round_timer = ref 120
let core_factor = ref 100

(**** Semantics ****)

let default_semantics = ref Types.Private
let local_semantics = ref None
