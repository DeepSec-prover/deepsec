exception Internal_error of string

let running_api = ref false

let debug_activated = false

let log_file =
  let pid = Unix.getpid () in
  let local_time = Unix.localtime (Unix.time()) in
  let path =
    Unix.(Printf.sprintf "log/log_%d_%d_%d_%dh%dm%ds_%d.txt"
    local_time.tm_year local_time.tm_mon local_time.tm_mday
    local_time.tm_hour local_time.tm_min local_time.tm_sec
    pid)
  in
  let exe_path = Filename.dirname Sys.executable_name in
  let file = Filename.concat exe_path path in
  open_out file

let internal_error msg =
  if debug_activated
  then
    begin
      Printf.fprintf log_file "Internal error : %s\nPlease report the bug to vincent.cheval@loria.fr with the input file and output\n" msg;
      flush log_file
    end;
  raise (Internal_error msg)

let debug =
  if debug_activated
  then fun f -> f ()
  else fun _ -> ()

let display_in_log = false

let print_in_log ?(always=false) s =
  if display_in_log || always
  then
    begin
      Printf.fprintf log_file "%s" s;
      flush log_file
    end

let log =
  if debug_activated
  then
    (fun f ->
        Printf.fprintf log_file "%s" (f());
        flush log_file
    )
  else fun _ -> ()

(**** Testing *****)

let test_activated = false

let test =
  if test_activated
  then fun f -> f ()
  else fun _ -> ()

(**** Version ****)

let version = ref "VERSION"
let git_commit = ref "GITCOMMIT"
let git_branch = ref "GITBRANCH"

(**** Paths ****)

let path_deepsec = ref ""
let path_html_template = ref ""
let path_index = ref (Filename.current_dir_name)
let tmp_file = ref ""
let path_database = ref ""

(**** Trace display ****)

let display_trace = ref false
let quiet = ref false

(**** Distribution ****)

let physical_core = PHYSICALCORE

let distributed = ref None
let local_workers = ref None
let distant_workers = ref ([]:(string*string*int option) list)
let number_of_jobs = ref None
let round_timer = ref 120
let core_factor = ref 100

(**** Semantics ****)

let default_semantics = ref Types.Private
let local_semantics = ref None
let por = ref true
