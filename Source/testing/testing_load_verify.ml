open Testing_functions
open Testing_parser_functions

(** An element of type [data_verification] must be associated to each tested function. *)
type data_verification =
  {
    data_IO : data_IO; (** The data I/O associated to the function defined in the module [Testing_functions] (ex: [Testing_function.data_IO_Term_Subst_unify]). *)
    name : string; (** The name of the function. This will be use when calling the executatble. We take the convention to indicate the full name of the function (ex : ["Term.Subst.unify"]).*)
    parsing_function : (Lexing.lexbuf -> Testing_grammar.token) -> Lexing.lexbuf -> (parsing_mode -> string); (** The function generated by the parser for tests defined in the generated module [Testing_grammar] (ex: [Testing_grammar.parse_Term_Subst_unify]). *)
  }

(** {3 Functions to be tested} *)

let data_verification_Term_Subst_unify =
  {
    data_IO = data_IO_Term_Subst_unify;
    name = "Term.Subst.unify";
    parsing_function = Testing_grammar.parse_Term_Subst_unify
  }

let data_verification_Term_Subst_is_matchable =
  {
    data_IO = data_IO_Term_Subst_is_matchable;
    name = "Term.Subst.is_matchable";
    parsing_function = Testing_grammar.parse_Term_Subst_is_matchable
  }

let data_verification_Term_Subst_is_extended_by =
  {
    data_IO = data_IO_Term_Subst_is_extended_by;
    name = "Term.Subst.is_extended_by";
    parsing_function = Testing_grammar.parse_Term_Subst_is_extended_by
  }

let data_verification_Term_Subst_is_equal_equations =
  {
    data_IO = data_IO_Term_Subst_is_equal_equations;
    name = "Term.Subst.is_equal_equations";
    parsing_function = Testing_grammar.parse_Term_Subst_is_equal_equations
  }

let data_verification_Term_Modulo_syntactic_equations_of_equations =
  {
    data_IO = data_IO_Term_Modulo_syntactic_equations_of_equations;
    name = "Term.Modulo.syntactic_equations_of_equations";
    parsing_function = Testing_grammar.parse_Term_Modulo_syntactic_equations_of_equations
  }

let data_verification_Term_Rewrite_rules_normalise =
  {
    data_IO = data_IO_Term_Rewrite_rules_normalise;
    name = "Term.Rewrite_rules.normalise";
    parsing_function = Testing_grammar.parse_Term_Rewrite_rules_normalise
  }

let data_verification_Term_Rewrite_rules_skeletons =
  {
    data_IO = data_IO_Term_Rewrite_rules_skeletons;
    name = "Term.Rewrite_rules.skeletons";
    parsing_function = Testing_grammar.parse_Term_Rewrite_rules_skeletons
  }

let data_verification_Term_Rewrite_rules_generic_rewrite_rules_formula =
  {
    data_IO = data_IO_Term_Rewrite_rules_generic_rewrite_rules_formula;
    name = "Term.Rewrite_rules.generic_rewrite_rules_formula";
    parsing_function = Testing_grammar.parse_Term_Rewrite_rules_generic_rewrite_rules_formula
  }

let data_verification_Data_structure_Eq_implies =
  {
    data_IO = data_IO_Data_structure_Eq_implies;
    name = "Data_structure.Eq.implies";
    parsing_function = Testing_grammar.parse_Data_structure_Eq_implies
  }

(** {3 Verification of tests} *)

(** [verify_function data] verifies all the tests for the function associated to [data]. *)
let verify_function data_verif =
  let nb_of_tests = List.length data_verif.data_IO.validated_tests in

  Printf.printf "### Testing the function %s... \n" data_verif.name;

  let test_number = ref 1
  and faulty_tests = ref [] in

  List.iter (fun (valid_test,_) ->
    let lexbuf = Lexing.from_string valid_test in
    let test = (data_verif.parsing_function Testing_lexer.token lexbuf) Verify in
    if test <> valid_test
    then faulty_tests := (!test_number, valid_test, test) :: !faulty_tests;

    incr test_number
  ) data_verif.data_IO.validated_tests;

  faulty_tests := List.rev !faulty_tests;

  if !faulty_tests = []
  then Printf.printf "All %d tests of the function %s were successful\n " nb_of_tests data_verif.name
  else
    begin
      let nb_of_faulty_tests = List.length !faulty_tests in
      Printf.printf "%d tests of the function %s were successful but %d were unsuccessful.\n\n"  (nb_of_tests - nb_of_faulty_tests) data_verif.name nb_of_faulty_tests;

      List.iter (fun (nb,valid_test,faulty_test) ->
        Printf.printf "**** Test %d of %s was unsuccessful.\n" nb data_verif.name;
        Printf.printf "---- Validated test :\n%s" valid_test;
        Printf.printf "---- Test obtained after verification :\n%s\n" faulty_test
      ) !faulty_tests
    end

(** [verify_all] verifies all the tests of all the functions. *)
let verify_all () =
  verify_function data_verification_Term_Subst_unify;
  verify_function data_verification_Term_Subst_is_matchable;
  verify_function data_verification_Term_Subst_is_extended_by;
  verify_function data_verification_Term_Subst_is_equal_equations;
  verify_function data_verification_Term_Modulo_syntactic_equations_of_equations;
  verify_function data_verification_Term_Rewrite_rules_normalise;
  verify_function data_verification_Term_Rewrite_rules_skeletons;
  verify_function data_verification_Term_Rewrite_rules_generic_rewrite_rules_formula;
  verify_function data_verification_Data_structure_Eq_implies

(** {3 Loading of tests} *)

let load_function data_verif =

  data_verif.data_IO.validated_tests <-
    List.map (fun (terminal_test,_) ->
      let lexbuf = Lexing.from_string terminal_test in
      let latex_test = (data_verif.parsing_function Testing_lexer.token lexbuf) Load in
      (terminal_test,latex_test)
    ) data_verif.data_IO.validated_tests;

  data_verif.data_IO.tests_to_check <-
    List.map (fun (terminal_test,_) ->
      let lexbuf = Lexing.from_string terminal_test in
      let latex_test = (data_verif.parsing_function Testing_lexer.token lexbuf) Load in
      (terminal_test,latex_test)
    ) data_verif.data_IO.tests_to_check

let load () =
  preload ();
  load_function data_verification_Term_Subst_unify;
  load_function data_verification_Term_Subst_is_matchable;
  load_function data_verification_Term_Subst_is_extended_by;
  load_function data_verification_Term_Subst_is_equal_equations;
  load_function data_verification_Term_Modulo_syntactic_equations_of_equations;
  load_function data_verification_Term_Rewrite_rules_normalise;
  load_function data_verification_Term_Rewrite_rules_skeletons;
  load_function data_verification_Term_Rewrite_rules_generic_rewrite_rules_formula;
  load_function data_verification_Data_structure_Eq_implies
